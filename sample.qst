// Comments Are Enclosed in 2 Double Slashes //

var x = 'test string';
var y = 3  // Semi-colons are optional //

// One space to end concatenation //
print('Variable x is &x  and variable y is &y');

print('
\n
Escaped characters are called with a backslash \n
Printing Can Also Be Multi-line
\n
');


// Loops //
var a = 1;
var b = 1;

for(1 to 1000){
  b+2; // add 2 to b //
  a-1/b; // subtract 1/b from a //
  b+2;
  a+1/b;
}

print('Pi is approximately &a*4 \n\n');

// Inclusive of 1, exclusive of 10 //
for(0 to 5 as i){
  print(i);
}
print('\n');


// While Loops //
var i = 2;

while(i < Factorial(6)){
  i^2;
  print(i);
}
print('\n');


// Library Functions //
var z = 3;

z = Arcsin(0.87);
print('Arcsin of 0.87 is &z');

z = Random.string(4);
print('One random string is &z');

z = Time.micro();
print('&z  microseconds have passed this second \n');

z = Files.read('testfile.txt');
print('testfile.txt says `&z `');

//
Print 'what do you want to replace' and set the
response to the variable replacer
//
input('What do you want to replace? ', replacer);
input('What do you want to replace &replacer  with? ', replacement);

z = z.Replace(replacer, replacement);
Files.write('testfile.txt', z);
print('testfile.txt now says &z');

print('\n');


// Delays //

input('What should the delay be (milliseconds)? ', wait);
Time.start();
print('Start');

delay(wait);

print('End');
var timePassed = Time.end();

print('That delay was &timePassed  milliseconds\n');

input('Press enter to continue');


//////
One thing about Quest is that it's object-oriented.

It isn't just normally object-oriented though, this
language takes it to a whole other level.

Check this out:
//////

var p = Random.int(0, 10);

print('The type of variable p is &p.type');

// Not super interesting there //

print('Variable p is &p , &p.value');

// Still not that interesting //

print('The minimum value on p was &p.min');
print('The maximum value on p was &p.max');

print('The range of p was &p.range \n');

// There we go, this is only the surface of the
object-oriented-ness of quest though //

// functions //
func addOne(num){
  var s = num;

  s.value = num+1;
  s.initial = num;
  s.randomStringBecuaseWhyNot = 'hello world';

  return s;
}

var r = addOne(2);

print(r);
print(r.type);
print(r.initial);
print(r.randomStringBecuaseWhyNot);

r.randomStringBecuaseWhyNot = 'bye world';

print(r.randomStringBecuaseWhyNot);

var v = 'hi there this is forwards';
v.Reverse();
print(v);